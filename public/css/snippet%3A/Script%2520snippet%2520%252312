const css = document.createElement("link"); css.rel = "stylesheet"; css.href = "http://127.0.0.1:5500/public/css/customer.css"; document.head.appendChild(css);

(function (jQuery) {
  samo.page_ready = false;
  jQuery(function () {
    samo.page_ready = true;
  });

  samo.page_callback = function (page, samo_action, params) {
    if (!samo.page_ready) {
      setTimeout(function () {
        samo.page_callback(page, samo_action, params);
      }, 0);
      return;
    }

    if (page === "") {
      window.location.href = "/search_tour";
    }

    const slider_dev = document.querySelector(".hero_slider_dev");
    const slides_dev = document.querySelectorAll(".slide_dev");
    const prev_devBtn = document.querySelector(".nav_dev.prev_dev");
    const next_devBtn = document.querySelector(".nav_dev.next_dev");

    let currentIndex_dev = 0;
    let startX_dev = 0;
    let isDragging_dev = false;

    function showSlide(index) {
      slides_dev.forEach((slide, i) => {
        slide.classList.remove("active", "prev_dev");
        if (i === index) {
          slide.classList.add("active");
        } else if (i === index - 1) {
          slide.cla
            html, body, #canvas {
      width: 100%;
      height: 100%;
      margin: 0;
    }
   
    #wrapper {
      position: absolute;
      top: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }
    #menu {
      width: 100%;
    }ssList.add("prev_dev");
        }
      });
    }

    if (prev_devBtn && next_devBtn && slider_dev) {
      prev_devBtn.addEventListener("click", () => {
        currentIndex_dev =
          (currentIndex_dev - 1 + slides_dev.length) % slides_dev.length;
        showSlide(currentIndex_dev);
      });

      next_devBtn.addEventListener("click", () => {
        currentIndex_dev = (currentIndex_dev + 1) % slides_dev.length;
        showSlide(currentIndex_dev);
      });

      slider_dev.addEventListener("mousedown", (e) => {
        isDragging_dev = true;
        startX_dev = e.clientX;
      });

      slider_dev.addEventListener("mouseup", (e) => {
        if (!isDragging_dev) return;
        isDragging_dev = false;
        const diff = e.clientX - startX_dev;

        if (diff > 50) {
          currentIndex_dev =
            (currentIndex_dev - 1 + slides_dev.length) % slides_dev.length;
        } else if (diff < -50) {
          currentIndex_dev = (currentIndex_dev + 1) % slides_dev.length;
        }

        showSlide(currentIndex_dev);
      });
    }

    // обработка STATEINC -> установка нужного слайда
    if (page === "search_tour" && params?.STATEINC) {
      const stateMap = {
        36: "azerbaijan_1",
        10: "egypt_1",
        29: "georgia_1",
        13: "uae_1",
        9: "turkiye_1",
      };

      const targetId = stateMap[params.STATEINC];
      const targetSlide = targetId ? document.getElementById(targetId) : null;

      if (targetSlide) {
        slides_dev.forEach((slide, index) => {
          if (slide.id === targetId) {
            currentIndex_dev = index;
          }
        });

        showSlide(currentIndex_dev); // 👉 обновляем слайд через основную функцию
      }
    }

    return;
  };
})(samo.jQuery);


const rippleSettings = {
  maxSize: 100,
  animationSpeed: 5,
  strokeColor: [148, 217, 255],
};

const canvasSettings = {
  blur: 8,
  ratio: 1,
};

function Coords(x, y) {
  this.x = x || null;
  this.y = y || null;
}

const Ripple = function Ripple(x, y, circleSize, ctx) {
  this.position = new Coords(x, y);
  this.circleSize = circleSize;
  this.maxSize = rippleSettings.maxSize;
  this.opacity = 1;
  this.ctx = ctx;
  this.strokeColor = `rgba(${Math.floor(rippleSettings.strokeColor[0])},
    ${Math.floor(rippleSettings.strokeColor[1])},
    ${Math.floor(rippleSettings.strokeColor[2])},
    ${this.opacity})`;

  this.animationSpeed = rippleSettings.animationSpeed;
  this.opacityStep = (this.animationSpeed / (this.maxSize - circleSize)) / 2;
};

Ripple.prototype = {
  update: function update() {
    this.circleSize = this.circleSize + this.animationSpeed;
    this.opacity = this.opacity - this.opacityStep;
    this.strokeColor = `rgba(${Math.floor(rippleSettings.strokeColor[0])},
      ${Math.floor(rippleSettings.strokeColor[1])},
      ${Math.floor(rippleSettings.strokeColor[2])},
      ${this.opacity})`;
  },
  draw: function draw() {
    this.ctx.beginPath();
    this.ctx.strokeStyle = this.strokeColor;
    this.ctx.arc(this.position.x, this.position.y, this.circleSize, 0,
      2 * Math.PI);
    this.ctx.stroke();
  },
  setStatus: function setStatus(status) {
    this.status = status;
  },
};

const canvas = document.querySelector('#canvas');
const ctx = canvas.getContext('2d');
const ripples = [];

const height = document.body.clientHeight;
const width = document.body.clientWidth;

const rippleStartStatus = 'start';

const isIE11 = !!window.MSInputMethodContext && !!document.documentMode;

canvas.style.filter = `blur(${canvasSettings.blur}px)`;

canvas.width = width * canvasSettings.ratio;
canvas.height = height * canvasSettings.ratio;

canvas.style.width = `${width}px`;
canvas.style.height = `${height}px`;

let animationFrame;

// Add GUI settings
const addGuiSettings = () => {
  const gui = new dat.GUI();
  gui.add(rippleSettings, 'maxSize', 0, 1000).step(1);
  gui.add(rippleSettings, 'animationSpeed', 1, 30).step(1);
  gui.addColor(rippleSettings, 'strokeColor');

  const blur = gui.add(canvasSettings, 'blur', 0, 20).step(1);
  blur.onChange((value) => {
    canvas.style.filter = `blur(${value}px)`;
  });
};

addGuiSettings();

// Function which is executed on mouse hover on canvas
const canvasMouseOver = (e) => {
  const x = e.clientX * canvasSettings.ratio;
  const y = e.clientY * canvasSettings.ratio;
  ripples.unshift(new Ripple(x, y, 2, ctx));
};

const animation = () => {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  const length = ripples.length;
  for (let i = length - 1; i >= 0; i -= 1) {
    const r = ripples[i];

    r.update();
    r.draw();

    if (r.opacity <= 0) {
      ripples[i] = null;
      delete ripples[i];
      ripples.pop();
    }
  }
  animationFrame = window.requestAnimationFrame(animation);
};

animation();
canvas.addEventListener('mousemove', canvasMouseOver);
